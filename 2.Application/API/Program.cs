using Microsoft.AspNetCore.Builder;             // Permite construir e configurar o aplicativo.
using Microsoft.Extensions.DependencyInjection; // Gerencia serviÃ§os (como APIs, autenticaÃ§Ã£o, banco de dados).
using Microsoft.Extensions.Hosting;             //  Ajuda a controlar o ciclo de vida do aplicativo (iniciar e parar corretamente).
using Microsoft.AspNetCore.Cors;
using System.Reflection;
using NSwag;

//ðŸ“Œ O que essa parte faz?
// âœ” Cria a aplicaÃ§Ã£o web (builder).
// âœ” Carrega as configuraÃ§Ãµes do projeto (como JSON, variÃ¡veis de ambiente).
// âœ” Permite adicionar serviÃ§os (como autenticaÃ§Ã£o, API, banco de dados).
var builder = WebApplication.CreateBuilder(args);

// Adiciona suporte ao OpenAPI com NSwag
// Isso serve para facilitar a visualizaÃ§Ã£o dos endpoints no Swagger!
builder.Services.AddOpenApiDocument(config =>
{
    config.Title = "Minha API"; // Define o tÃ­tulo da API como "Minha API". Este Ã© o nome que serÃ¡ exibido na interface do Swagger.
    config.Version = "v1";      // Define a versÃ£o da API como "v1". Isso Ã© Ãºtil para versionamento de API.

    // using System.Reflection;
    // Esse trecho de cÃ³digo tem o objetivo de incluir a documentaÃ§Ã£o gerada pelos comentÃ¡rios XML no Swagger, melhorando a descriÃ§Ã£o da sua API
    var xmlFilename = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";  // Corrigido para Assembly
    var xmlFilePath = Path.Combine(AppContext.BaseDirectory, xmlFilename); // Combina o caminho com o nome do arquivo XML
    if (File.Exists(xmlFilePath))  // Verifica se o arquivo XML realmente existe
    {
        config.OperationProcessors.Add(new NSwag.Generation.Processors.Security.OperationSecurityScopeProcessor("Bearer"));
        config.DocumentProcessors.Add(new NSwag.Generation.Processors.Security.SecurityDefinitionAppender("Bearer", new NSwag.OpenApiSecurityScheme
        {
            Type = NSwag.OpenApiSecuritySchemeType.ApiKey,
            Name = "Authorization",
            In = NSwag.OpenApiSecurityApiKeyLocation.Header,
            Description = "Add the bearer token to your request",
        }));
    }
});


// Aqui estamos abilitando os CORS,
builder.Services.AddCors(options =>
    options.AddPolicy("MyPolice",
    builder =>
    {
        builder.AllowAnyOrigin()
               .AllowAnyMethod()
               .AllowAnyHeader();
               //.WithExposedHeaders("Authorization"); // Permite que o cliente veja este cabeÃ§alho
    }));


// Adicionando suporte a Controllers
// ðŸ“Œ O que essa parte faz?
// âœ” Diz ao ASP.NET Core que queremos usar Controllers, 
// que sÃ£o responsÃ¡veis por lidar com requisiÃ§Ãµes HTTP,
builder.Services.AddControllers();


// Criando o app
// ðŸ“Œ O que essa parte faz?
// âœ” ConstrÃ³i a aplicaÃ§Ã£o com as configuraÃ§Ãµes feitas anteriormente.
// âœ” Agora o app estÃ¡ pronto para ser configurado!
var app = builder.Build();



// ConfiguraÃ§Ã£o do pipeline
// âœ” Se a aplicaÃ§Ã£o estiver em modo de desenvolvimento, ele adiciona o Swagger.
// âœ” Isso cria uma documentaÃ§Ã£o interativa para testar os endpoints da API no navegador.
// ðŸ”¹ O Swagger fica acessÃ­vel em: https://localhost:5001/swagger
if (app.Environment.IsDevelopment())
{
    app.UseOpenApi();    // DisponÃ­vel em /swagger/v1/swagger.json
    app.UseSwaggerUi();  // DisponÃ­vel em /swagger
}


app.UseCors("MyPolice");   // Adiciona o middleware do CORS
app.UseRouting();
app.UseHttpsRedirection(); // âœ” UseHttpsRedirection() â†’ Garante que todas as requisiÃ§Ãµes usem HTTPS.
app.UseAuthorization();    // âœ” UseAuthorization() â†’ Ativa o suporte a autorizaÃ§Ã£o (controle de acesso).
app.MapControllers();      // âœ” MapControllers() â†’ Diz ao ASP.NET Core para usar os Controllers da API para lidar com requisiÃ§Ãµes.


// âœ” Inicia a aplicaÃ§Ã£o e faz ela ficar rodando para receber requisiÃ§Ãµes.
// âœ” Sem isso, a API nÃ£o funciona!
app.Run();
